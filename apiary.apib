FORMAT: 1A
HOST: https://applyance.com

# Applyance
Applyance is a platform bringing delight to applications.

# Group Roles
There are four roles within Applyance. Accounts must have one role and can have multiple roles.

`Role` objects are read-only.

**Chief**

Super administrators within Applyance.

Can manage *roles*, *domains*, and *definitions*. Oversees *entities*.

**Applicant**

Accounts who submit an *application*.

**Admin**

Accounts who manage *entities*.

**Reviewer**

Accounts who manage *units* and review *applications*.

All *admins* will automaticaly be *reviewers* of their subunits.

## Role [/roles/{id}]
+ Parameters

    + id (required, number, `1`) ... Role ID

+ Model

    + Body

            {
                "id": 1,
                "name": "applicant"
            }

### Retrieve a Role [GET]
+ Response 200 (application/json)

    [Role][]

## Roles [/roles]
+ Model

    + Body

            [
                {
                    "id": 1,
                    "name": "applicant"
                }
            ]

### List [GET]
+ Response 200 (application/json)

    [Roles][]

# Group Domains
Domains are how entities and definitions are categorized within the Applyance system.

For example, restaurants could be in a domain of *Retail*.

## Domain [/domains/{id}]
+ Parameters

    + id (required, number, `1`) ... Domain ID

+ Model

    + Body

            {
                "id": 1,
                "name": "Restaurant",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
+ Response 200 (application/json)

    [Domain][]

### Update [PUT]
*Only chiefs can update a domain.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Restaurant"
            }

+ Response 200 (application/json)

    [Domain][]

### Remove [DELETE]
*Only chiefs can remove domains.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Domains [/domains]
+ Model

    + Body

            [
                {
                    "id": 1,
                    "name": "Restaurants",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
+ Response 200 (application/json)

    [Domains][]

### Create [POST]
*Only chiefs can create domains.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Restaurants"
            }

+ Response 201 (application/json)

    [Domain][]

# Group Accounts
Manage Accounts within the Applyance platform.

## Authentication [/accounts/auth]
Authentication endpoint for accounts in Applyance.

The `Authorization` header in the response will return the `api_key` for future API requests.

+ Model

    + Header
    
            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body
    
            {
                "id": 1,
                "name": "John Smith",
                "email": "johnny@gmail.com",
                "is_verified": false,
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00",
                "roles": [
                    {
                        "id": 1,
                        "name": "admin"
                    }
                ]
            }

### Authenticate [POST]
+ Request (application/json)

        {
            "email": "johnny@gmail.com",
            "password": "secret"
        }

+ Response 200 (application/json)

    [Authentication][]

## Account [/accounts/{id}]
A single Account object with all its details.

+ Parameters

    + id (required, number, `1`) ... Account ID

+ Model

    + Body

            {
                "id": 1,
                "name": "Johnny Rocket",
                "email": "johnny@gmail.com",
                "is_verified": false,
                "avatar": {
                    "id": 1,
                    "name": "test.gif",
                    "content_type": "image/gif",
                    "byte_size": 12345,
                    "url": "http://applyance.com/avatars/image.gif",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "roles": [
                    {
                        "id": 1,
                        "name": "admin"
                    }
                ],
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
*Must be account owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Account][]

### Update [PUT]
*Must be account owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "John Smith",
                "password": "secret",
                "email": "stjowa@gmail.com", // Password required if updating email
                "new_password": "secret", // Password required if changing password
                "avatar": {
                    "name": "john.gif",
                    "token": "1029dlsakjf01923409dajksflasd"
                }
            }

+ Response 200 (application/json)

    [Account][]

### Remove [DELETE]
*Must be account owner.*

+ Response 204 (application/json)

## Password Reset [/accounts/passwords/reset]
Reset the account password. This creates a reset digest and emails the account the digest for changing the password.

### Reset [POST]
+ Request (application/json)

        {
            "email": "johnny@gmail.com"
        }

+ Response 201 (application/json)

## Password Set [/accounts/passwords/set]
Sets the account password by supplying the reset digest and new password.

### Set [POST]
+ Request (application/json)

        {
            "reset_digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
            "new_password": "secret"
        }

+ Response 201 (application/json)

    [Account][]

## Verification [/accounts/verify]
Verifies the account by supplying the verify digest that was sent to the user by email.

### Verify [POST]
+ Request (application/json)

    + Body

            {
                "verify_digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4="
            }

+ Response 200 (application/json)

    [Account][]

# Group Attachments
`Attachment` objects are files uploaded to Applyance. `Attachment` objects are used in several resources, such as `Message`, `Template`, and `Answer`.

## Attachments [/attachments]
Uploads a file. The request body should be the binary data of the attachment. Make sure to set the `Content-Type` header.

Once the upload is successful, you'll get a 201 OK response, and we'll give you a token back that you'll need to save locally to attach later to the specified resource.

### Create [POST]
+ Request

    + Header

            Content-Type: image/png

    + Body

            ...

+ Response 201 (application/json)

    + Body

            {
                "token": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c"
            }

# Group Entities
Entities within Applyance represent the institutions that are managing applications (schools, small businesses, etc).

## Entity [/entities/{id}]
A single Entity object with all its details. Note that entities are created when a reviewer registers.

+ Parameters

    + id (required, number, `1`) ... Entity ID

+ Model

    + Body

            {
                "id": 1,
                "domain": {
                    "id": 1,
                    "name": "Retail"
                },
                "name": "Frothy Monkey",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Entity][]

### Update [PUT]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "The Frothy Monkey",
                "domain_id": 1 // Optional
            }

+ Response 200 (application/json)

    [Entity][]

### Remove [DELETE]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Entities [/entities]
+ Model

    + Body

            [
                {
                    "id": 1,
                    "domain_id": 1,
                    "name": "Frothy Monkey",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
*Must be a chief.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200

    [Entities][]

### Create [POST]
+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=
    
    + Body
            
            {
                "name": "Frothy Monkey",
                "domain_id": 1 // Optional
            }

+ Response 200

    [Entity][]

## Entities - Domain [/domains/{id}/entities]
*Must be a chief.*

+ Parameters

    + id (required, number, `1`) ... Domain ID

### List [GET]
+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200

    [Entities][]

# Group Admins
Admins manage `Entity` objects.

## Admin [/admins/{id}]
+ Parameters

    + id (required, number, `1`)

+ Model

    + Body

            {
                "id": 1,
                "account": {
                    "id": 1,
                    "name": "Johnny Rocket",
                    "email": "johnny@gmail.com",
                    "is_verified": false,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00",
                    "roles": [
                        {
                            "id": 1,
                            "name": "admin"
                        }
                    ]
                },
                "entity": {
                    "id": 1,
                    "name": "Test",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200

    [Admin][]

### Remove [DELETE]
This does not delete the account. Just the admin from the entity.

*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Admins [/entities/{id}/admins]
+ Parameters

    + id (required, number, `1`) ... Entity ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "entity_id": 1,
                    "account_id": 1,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
*Must be an entity admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Admins][]

### Create [POST]
Creates an admin for the entity.

+ Request (application/json)

    + Body
    
            {
                "name": "Stephen Watkins",
                "email": "stjowa@gmail.com",
                "password": "secret"
            }

+ Response 200 (application/json)

    [Admin][]

# Group Admin Invites
Invite an admin to an entity. Admin invites can be sent by other admins in the entity.

## Admin Invite [/admins/invites/{id}]
Possible status values:

- `open` - Has not yet been claimed.
- `claimed` - Has been claimed.

+ Parameters

    + id (required, number, `1`) ... Admin Invite ID

+ Model (application/json)

    + Body

            {
                "id": 1,
                "entity": {
                    "id": 1,
                    "name": "Entity Name",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "email": "johnny@gmail.com",
                "status": "open",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Get Invite [GET]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Admin Invite][]

### Claim Invite [PUT]
Claims the invitation by sending the `claim_digest` that was received in the invite email.

+ Request (application/json)

    + Body

            {
                "claim_digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                "name": "Stephen",
                "password": "secret"
            }

+ Response 200 (application/json)

    [Admin][]

## Admin Invites [/entities/{id}/admins/invites]
+ Parameters

    + id (required, number, `1`) ... Entity ID

+ Model (application/json)

    + Body

            [
                {
                    "id": 1,
                    "entity_id": 1,
                    "email": "johnny@gmail.com",
                    "status": "claimed",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### Create Invite [POST]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "email": "johnny@gmail.com"
            }

+ Response 201 (application/json)

    [Admin Invite][]

### List Invites [GET]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Admin Invites][]

# Group Units
Units are subsystems of entities. Usually they would represent locations or campuses.

## Unit [/units/{id}]
+ Parameters

    + id (required, number, `1`) ... Unit ID

+ Model (application/json)

    + Body

            {
                "id": 1,
                "name": "Atlanta, GA",
                "entity": {
                    "id": 1,
                    "name": "Entity",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Unit][]

### Update [PUT]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Charleston, SC"
            }

+ Response 200 (application/json)

    [Unit][]

### Remove [DELETE]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204 (application/json)

## Units [/entities/{id}/units]
+ Parameters

    + id (required, number, `1`) ... Entity ID

+ Model (application/json)

    + Body

            [
                {
                    "id": 1,
                    "name": "Atlanta, GA",
                    "entity_id": 1,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Units][]

### Create [POST]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Atlanta, GA"
            }

+ Response 201 (application/json)

    [Unit][]

# Group Reviewers
Reviewers manage units and review applications.

They can have one of three access levels:

- `full` - Can review applicants, invite other reviewers, and view insights.
- `limited` - Can review applicants.

## Reviewer [/reviewers/{id}]
+ Parameters

    + id (required, number, `1`)

+ Model

    + Body

            {
                "id": 1,
                "access_level": "full",
                "is_entity_admin": true,
                "account": {
                    "id": 1,
                    "name": "Johnny Rocket",
                    "email": "johnny@gmail.com",
                    "is_verified": false,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00",
                    "roles": [
                        {
                            "id": 1,
                            "name": "admin"
                        }
                    ]
                },
                "unit": {
                    "id": 1,
                    "name": "Unit name",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
*Must be a full reviewer or owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200

    [Reviewer][]

### Update [PUT]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=
    
    + Body
            
            {
                "access_level": "limited"
            }

+ Response 200

    [Reviewer][]

### Remove [DELETE]
*Must be a full reviewer or owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Reviewers - Unit [/units/{id}/reviewers]
+ Parameters

    + id (required, number, `1`) ... Unit ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "access_level": "full",
                    "is_entity_admin": false,
                    "account_id": 1,
                    "entity_id": 1
                }
            ]

### List [GET]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Reviewers - Unit][]

# Group Reviewer Invites
Invite a reviewer to a unit. Reviewer invites can be sent by other `full` reviewers in the unit.

Possible `status` values:

- `open` - Has not yet been claimed.
- `claimed` - Has been claimed.

Possible `access_level` values:

- `full` - Has not yet been claimed.
- `limited` - Has been claimed.

## Reviewer Invite [/reviewers/invites/{id}]
+ Parameters

    + id (required, number, `1`) ... Reviewer Invite ID

+ Model (application/json)

    + Body

            {
                "id": 1,
                "email": "johnny@gmail.com",
                "access_level": "full",
                "status": "open",
                "unit": {
                    "id": 1,
                    "name": "Unit name",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Get Invite [GET]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Reviewer Invite][]

### Claim Invite [PUT]
Claims the invitation by sending the `claim_digest` that was received in the invite email.

+ Request (application/json)

    + Body

            {
                "claim_digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                "name": "Stephen",
                "password": "secret"
            }

+ Response 200 (application/json)

    [Reviewer Invite][]

## Reviewer Invites [/units/{id}/reviewers/invites]
+ Parameters

    + id (required, number, `1`) ... Unit ID

+ Model (application/json)

    + Body

            [
                {
                    "id": 1,
                    "email": "johnny@gmail.com",
                    "access_level": "full",
                    "status": "claimed",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### Create Invite [POST]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "email": "johnny@gmail.com",
                "access_level": "full"
            }

+ Response 201 (application/json)

    [Reviewer Invite][]

### List Invites [GET]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Reviewer Invites][]

# Group Spots
Represents an opening in the unit.

(e.g. job for companies, cohort for schools)

Spots can have the following `status`:

- `open` - Spot is actively accepting applications
- `paused` - Spot is not currently accepting applications
- `closed` - Spot is done accepting applications

## Spot [/spots/{id}]
+ Parameters

    + id (required, number, `1`) ... Spot ID

+ Model

    + Body

            {
                "id": 1,
                "name": "Cohort 4",
                "detail": "Lorem ipsum ...",
                "status": "open",
                "unit_id": 1,
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Spot][]

### Update [PUT]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Cohort 4",
                "detail": "Lorem ipsum...",
                "status": "paused"
            }

+ Response 200 (application/json)

    [Spot][]

### Remove [DELETE]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Spots - Unit [/units/{id}/spots]
+ Parameters

    + id (required, number, `1`) ... Unit ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "name": "Cohort 4",
                    "detail": "Lorem ipsum ...",
                    "status": "open",
                    "unit_id": 1,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Spots - Unit][]

### Create [POST]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Cohort 4",
                "detail": "Lorem ipsum...",
                "status": "open"
            }

+ Response 201 (application/json)

    [Spot][]

# Group Definitions
`Definition` objects are the underlying backbone of `Field` objects.

Through `Definition` objects, we can server standardized questions.

Based on the `Definition` type, there could be more to the definition (e.g. storing multiple choice options). Extra information is stored as a helper object.

`Definition` objects can belong to *domains*, *units*, or neither.

## Definition [/definitions/{id}]
+ Parameters

    + id (required, number, `1`) ... Definition ID

+ Model

    + Body

            {
                "id": 1,
                "domain": {
                    "id": 1,
                    "name": "Domain",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "unit": null,
                "label": "Question Title",
                "type": "text",
                "description": "Detail...",
                "helper": null,
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Definition][]

### Update [PUT]
*Must be unit full reviewer (unit definition) or chief (domain definition).*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "label": "Question Title",
                "description": "Detail...",
                "type": "text",
                "helper": null
            }

+ Response 200 (application/json)

    [Definition][]

### Remove [DELETE]
*Must be unit full reviewer (unit definition) or chief (domain definition).*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Definitions - Domain [/domains/{id}/definitions]
+ Parameters

    + id (required, number, `1`) ... Domain ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "label": "Question Title",
                    "description": "Detail...",
                    "type": "text",
                    "helper": null,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Definitions - Domain][]

### Create [POST]
*Must be a chief.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "label": "Question Title",
                "type": "select",
                "description": "Detail...",
                "helper": {
                    "choices": ["Option 1", "Option 2"]
                }
            }

+ Response 200 (application/json)

    [Definition][]

## Definitions - Unit [/units/{id}/definitions]
+ Parameters

    + id (required, number, `1`) ... Unit ID

### List [GET]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Definitions - Domain][]

### Create [POST]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "label": "Question Title",
                "type": "select",
                "description": "Detail...",
                "helper": {
                    "choices": ["Option 1", "Option 2"]
                }
            }

+ Response 200 (application/json)

    [Definition][]


# Group Blueprints
Blueprints lay out the `Definition` objects that applicants need to answer.

## Blueprint [/blueprints/{id}]
+ Parameters

    + id (required, number, `1`) ... Blueprint ID

+ Model

    + Body

            {
                "id": 1,
                "definition": {
                    "id": 1,
                    "label": "Question Title",
                    "description": "Detail...",
                    "type": "text",
                    "helper": null,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                "position": 1,
                "is_required": true,
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
+ Request (application/json)

+ Response 200 (application/json)

    [Blueprint][]

### Update [PUT]
*Must be an admin (entity blueprint), full reviewer (unit and spot blueprint).*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "position": 2,
                "is_required": true
            }

+ Response 200 (application/json)

    [Blueprint][]

### Remove [DELETE]
*Must be an admin (entity blueprint), full reviewer (unit and spot blueprint).*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Blueprints - Spot [/spots/{id}/blueprints]
+ Parameter

    + id (required, number, `1`) ... Spot ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "definition_id": 1,
                    "position": 1,
                    "is_required": true,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
*Must be full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Blueprints - Spot][]

### Create [POST]
*Must be full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "definition_id": 1,
                "position": 1,
                "is_required": false
            }

+ Response 200 (application/json)

    [Blueprints - Spot][]

## Blueprints - Unit [/units/{id}/blueprints]
+ Parameter

    + id (required, number, `1`) ... Unit ID

### List [GET]
*Must be full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Blueprints - Spot][]

### Create [POST]
*Must be full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "definition_id": 1,
                "position": 1,
                "is_required": false
            }

+ Response 200 (application/json)

    [Blueprints - Spot][]

## Blueprints - Entity [/entities/{id}/blueprints]
+ Parameter

    + id (required, number, `1`) ... Entity ID

### List [GET]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Blueprints - Spot][]

### Create [POST]
*Must be an admin.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "definition_id": 1,
                "position": 1,
                "is_required": false
            }

+ Response 200 (application/json)

    [Blueprints - Spot][]

# Group Datums
`Datum` objects are saved field values from an applicant.

They are used to populate fields already asked and answered on Applyance.

## Datum [/datums/{id}]
+ Parameters

    + id (required, number, `1`) ... Datum ID

+ Model

    + Body

            {
                "id": 1,
                "account": {
                    "id": 1
                    ...
                },
                "definition": {
                    "id": 1,
                    ...
                },
                "attachments": [{
                    "id": 1,
                    ...
                }],
                "detail": "Answer here...",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Datum][]

### Update [PUT]
*Must be account owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "detail": "Answer here..."
            }

+ Response 200 (application/json)

    [Datum][]

### Remove [DELETE]
*Must be account owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Datums [/accounts/{id}/datums]
+ Parameter

    + id (required, number, `1`) ... Account ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "account_id": 1,
                    "definition_id": 1,
                    "detail": "Answer here...",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
*Must be account owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Datums][]

### Create [POST]
*Must be account owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "definition_id": 1,
                "detail": "Answer here..."
            }

+ Response 200 (application/json)

    [Datum][]

# Group Applications
Applications are a list of `Field` objects.

Activity time is determined by the following:

- Submission
- New Thread
- New Message
- Pipeline Change
- Stage Change

## Application [/applications/{id}]
+ Parameters

    + id (required, number, `1`) ... Application ID

+ Model

    + Body

            {
                "id": 1,
                "submitter": {
                    "id": 1,
                    "name": "John Smith",
                    "email": "johnny@gmail.com",
                    "is_verified": false,
                    "api_key": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00",
                    "roles": [
                        {
                            "id": 1,
                            "name": "admin"
                        }
                    ]
                },
                "spots": [
                    {
                        "id": 1,
                        "name": "Cohort 4",
                        "description": "Lorem ipsum ..."
                    }
                ],
                "digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                "fields": [
                    {
                        
                    }
                ],
                "submitted_from": {
                    "lat": 30.456,
                    "lng": -45.00
                },
                "submitted_at": "2012-03-22T16:56:48-05:00",
                "last_activity_at": "2012-03-22T16:56:48-05:00",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer or the owner to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Application][]

### Remove [DELETE]
*Must be a full reviewer.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=


+ Response 204

## Applications [/applications]
+ Model

    + Body

            [
                {
                    "id": 1,
                    "submitter": {
                        "id": 1,
                        "name": "John Smith",
                        "email": "johnny@gmail.com",
                        "is_verified": false,
                        "api_key": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                        "created_at": "2012-03-22T16:56:48-05:00",
                        "updated_at": "2012-03-22T16:56:48-05:00",
                        "roles": [
                            {
                                "id": 1,
                                "name": "admin"
                            }
                        ]
                    },
                    "spots": [
                        {
                            "id": 1,
                            "name": "Cohort 4",
                            "description": "Lorem ipsum ..."
                        }
                    ],
                    "digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                    "submitted_from": {
                        "lat": 30.456,
                        "lng": -45.00
                    },
                    "submitted_at": "2012-03-22T16:56:48-05:00",
                    "last_activity_at": "2012-03-22T16:56:48-05:00",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                {
                    "id": 2,
                    "submitter": {
                        "id": 2,
                        "name": "Jimmy Dean",
                        "email": "johnny@gmail.com",
                        "is_verified": false,
                        "api_key": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                        "created_at": "2012-03-22T16:56:48-05:00",
                        "updated_at": "2012-03-22T16:56:48-05:00",
                        "roles": [
                            {
                                "id": 1,
                                "name": "admin"
                            }
                        ]
                    },
                    "spots": [
                        {
                            "id": 1,
                            "name": "King of Sonic",
                            "description": "Lorem ipsum ..."
                        }
                    ],
                    "digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                    "submitted_from": {
                        "lat": 30.456,
                        "lng": -45.00
                    },
                    "submitted_at": "2012-03-22T16:56:48-05:00",
                    "last_activity_at": "2012-03-22T16:56:48-05:00",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                },
                {
                    "id": 3,
                    "submitter": {
                        "id": 3,
                        "name": "Jane Smith",
                        "email": "johnny@gmail.com",
                        "is_verified": false,
                        "api_key": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                        "created_at": "2012-03-22T16:56:48-05:00",
                        "updated_at": "2012-03-22T16:56:48-05:00",
                        "roles": [
                            {
                                "id": 1,
                                "name": "admin"
                            }
                        ]
                    },
                    "spots": [
                        {
                            "id": 1,
                            "name": "Burger King Manager",
                            "description": "Lorem ipsum ..."
                        }
                    ],
                    "digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                    "submitted_from": {
                        "lat": 30.456,
                        "lng": -45.00
                    },
                    "submitted_at": "2012-03-22T16:56:48-05:00",
                    "last_activity_at": "2012-03-22T16:56:48-05:00",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

## Applications - Spot [/spots/{id}/applications]
List of applications for a spot.

*Note that fields are not returned for application listings.*

+ Parameters

    + id (required, number, `1`) ... Spot ID

### List [GET]
*Must be a reviewer to access.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Applications][]

### Create [POST]
Anyone can create an application.

+ Request (application/json)

    + Body

            {
                "submitter": {
                    "name": "John Smith",
                    "email": "johnny@gmail.com"
                },
                "spots": [1],
                "fields": [
                    {
                      datum: {
                        detail: "Answer...",
                        definition: {
                          label: "Question 1",
                          description: "Description...",
                          type: "text"
                        }
                      }
                    },
                    {
                      datum: {
                        definition_id: definition_obj.id,
                        detail: "Answer 2..."
                      }
                    },
                    {
                      datum: {
                        id: datum_obj.id,
                        detail: "Answer 5..."
                      }
                    },
                    {
                      datum_id: datum_obj.id
                    }
                ],
                "submitted_from": {
                    "lat": 30.456,
                    "lng": -45.00
                }
            }

+ Response 200 (application/json)

    [Application][]

## Applications - Unit [/units/{id}/applications]
List of applications for a unit.

*Note that fields are not returned for application listings.*

+ Parameters

    + id (required, number, `1`) ... Unit ID

### List [GET]
*Must be a reviewer to access.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Applications][]

# Group Fields
Fields are the building blocks of applications.

Fields may or may not be based on previous definitions. Previous definitions allow for the common app.

## Field [/fields/{id}]
+ Parameters

    + id (required, number, `1`) ... Field ID

+ Model

    + Body

            {
                "id": 1,
                "application": {
                    "id": 1,
                    ...
                },
                "datum": {
                    "id": 1,
                    ...
                },
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
*Must be reviewer or owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Field][]

### Remove [DELETE]
*Must be reviewer or owner.*

+ Response 204

## Fields [/applications/{id}/fields]
+ Parameters

    + id (required, number, `1`) ... Application ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "application_id": 1,
                    "datum_id": 1,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
*Must be reviewer or owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Fields][]

### Create [POST]
*Must be reviewer or owner.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "datum_id": 1
            }

+ Response 200 (application/json)

    [Field][]

# Group Ratings
Numeric rating for an application at a certain spot.

Value can be between 1 and 5.

Only 1 rating allowed per application per spot per reviewer.

## Rating [/ratings/{id}]
+ Parameters

    + id (required, number, `1`) ... Rating ID

+ Model

    + Body

            {
                "id": 1,
                "application_id": 1,
                "spot_id": 1,
                "reviewer_id": 1,
                "rating": 4,
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Rating][]

### Update [PUT]
Must be the rating owner to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "rating": 4
            }

+ Response 200 (application/json)

    [Rating][]

### Remove [DELETE]
Must be the rating owner to delete.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Ratings [/applications/{id}/ratings]
+ Parameters

    + id (required, number, `1`) ... Application ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "application_id": 1,
                    "spot_id": 1,
                    "reviewer_id": 1,
                    "rating": 4,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Ratings][]

### Create [POST]
Must be a reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "spot_id": 1,
                "reviewer_id": 2,
                "rating": 3
            }

+ Response 200 (application/json)

    [Rating][]

# Group Threads
Threads are conversations that happen between a reviewer and an applicant.

## Thread [/threads/{id}]
+ Parameters

    + id (required, number, `1`) ... Thread ID

+ Model

    + Body

            {
                "id": 1,
                "unit_id": 1,
                "application_id": 1,
                "digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                "subject": "New Thread",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer or application owner to retrieve thread.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Thread][]

### Update [PUT]
Must be a reviewer to update a thread.

Can only change the `subject`.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "subject": "Test"
            }

+ Response 200 (application/json)

    [Thread][]

### Remove [DELETE]
Must be a thread owner to delete a thread.

*Note that this cannot remove emails that have been sent.*

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Threads - Reviewer [/reviewers/{id}/threads]
+ Parameters

    + id (required, number, `1`) ... Reviewer ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "unit_id": 1,
                    "application_id": 1,
                    "digest": "YW55IGNhcm5hbCBwbGVhc3VyZS4=",
                    "subject": "New Thread",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be a reviewer or application owner to list threads.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Threads - Reviewer][]

### Create [POST]
Must be a reviewer to create a thread.

Applicants cannot create new threads.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "subject": "New Thread",
                "application_id": 1,
                "message": "Lorem ipsum...",
                "attachments": [
                    {
                        "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                        "name": "mockup.png"
                    }
                ]
            }

+ Response 200 (application/json)

    [Thread][]

## Threads - Unit [/units/{id}/threads]
+ Parameters

    + id (required, number, `1`) ... Unit ID

### List [GET]
Must be a reviewer or application owner to list threads.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Threads - Reviewer][]

## Threads - Application [/applications/{id}/threads]
+ Parameters

    + id (required, number, `1`) ... Application ID

### List [GET]
Must be a reviewer or application owner to list threads.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Threads - Reviewer][]

# Group Templates
Templates are saved threads that can be reused for quick messaging. They are attached to a unit.

Inside the subject and message lines are `{{ supplants }}` for merge tags.

## Template [/templates/{id}]
+ Parameters

    + id (required, number, `1`) ... Template ID

+ Model

    + Body

            {
                "id": 1,
                "unit_id": 1,
                "subject": "Subject",
                "message": "Lorem ipsum...",
                "attachments": [
                    {
                        "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                        "name": "mockup.png"
                    }
                ],
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Template][]

### Update [PUT]
Must be a reviewer to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "subject": "Subject",
                "message": "Lorem ipsum...",
                "attachments": [
                    {
                        "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                        "name": "mockup.png"
                    }
                ]
            }

+ Response 200 (application/json)

    [Template][]

### Remove [DELETE]
Must be a reviewer to delete.

+ Response 204

## Templates [/units/{id}/templates]
+ Parameters

    + id (required, number, `1`) ... Unit ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "unit_id": 1,
                    "subject": "Subject",
                    "message": "Lorem ipsum...",
                    "attachments": [
                        {
                            "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                            "name": "mockup.png"
                        }
                    ],
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Templates][]

### Create [POST]
Must be a reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "subject": "Subject",
                "message": "Lorem ipsum...",
                "attachments": [
                    {
                        "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                        "name": "mockup.png"
                    }
                ]
            }

+ Response 200 (application/json)

    [Template][]

# Group Messages
Messages are subunits within threads. They are the meat of a conversation.

## Message [/messages/{id}]
Must be a reviewer to update.

+ Model (application/json)

    + Body

            {
                "id": 1,
                "thread_id": 1,
                "sender": {
                    "id": 1,
                    "name": "Johnny Rocket",
                    "email": "johnny@gmail.com",
                    "is_verified": false,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00",
                    "roles": [
                        {
                            "id": 1,
                            "name": "admin"
                        }
                    ]
                },
                "message": "Lorem ipsum...",
                "attachments": [
                    {
                        "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                        "name": "mockup.png"
                    }
                ]
            }

### Retrieve [GET]
Only a reviewer and relevant applicant can view message.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Message][]

### Update [PUT]
Must be the sender of the message to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "message": "Lorem ipsum...",
                "attachments": [
                    {
                        "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                        "name": "mockup.png"
                    }
                ]
            }

+ Response 200 (application/json)

    [Message][]

### Remove [DELETE]
+ Response 204

## Messages [/threads/{id}/messages]
Must be an admin or reviewer to update.

+ Model (application/json)

    + Body

            [
                {
                    "id": 1,
                    "thread_id": 1,
                    "sender": {
                        "id": 1,
                        "name": "Johnny Rocket",
                        "email": "johnny@gmail.com",
                        "is_verified": false,
                        "created_at": "2012-03-22T16:56:48-05:00",
                        "updated_at": "2012-03-22T16:56:48-05:00",
                        "roles": [
                            {
                                "id": 1,
                                "name": "admin"
                            }
                        ]
                    },
                    "message": "Lorem ipsum...",
                    "attachments": [
                        {
                            "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                            "name": "mockup.png"
                        }
                    ]
                }
            ]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Messages][]

### Create [POST]
Must be a reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "sender_id": 1,
                "message": "Lorem ipsum...",
                "attachments": [
                    {
                        "digest": "4f71ea23-134660425d1818169ecfdbaa43cfc07f4e33ef4c",
                        "name": "mockup.png"
                    }
                ]
            }

+ Response 200 (application/json)

    [Message][]

# Group Notes
Reviewers can leave notes on an application.

Markdown supported.

## Note [/notes/{id}]
+ Parameters

    + id (required, number, `1`) ... Note ID

+ Model

    + Body

            {
                "id": 1,
                "reviewer_id": 1,
                "application_id": 1,
                "note": "Lorem ipsum...",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Note][]

### Update [PUT]
Must be the note owner to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "id": 1,
                "note": "Lorem ipsum..."
            }

+ Response 200 (application/json)

    [Note][]

### Remove [DELETE]
Must be the note owner to delete.

+ Response 204

## Notes - Reviewer [/reviewers/{id}/notes]
+ Parameters

    + id (required, number, `1`) ... Reviewer ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "reviewer_id": 1,
                    "application_id": 1,
                    "note": "Lorem ipsum...",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Notes - Reviewer][]

### Create [POST]
Must be a reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "application_id": 1,
                "note": "Lorem ipsum...",
            }

+ Response 200 (application/json)

    [Note][]

## Notes - Application [/applications/{id}/notes]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Notes - Reviewer][]

# Group Pipelines
Pipelines are a method of organization for units.

## Pipeline [/pipelines/{id}]
+ Parameters

    + id (required, number, `1`) ... Pipeline ID

+ Model

    + Body

            {
                "id": 1,
                "unit_id": 1,
                "name": "Subject",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Pipeline][]

### Update [PUT]
Must be at least a full-access reviewer to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Subject"
            }

+ Response 200 (application/json)

    [Pipeline][]

### Remove [DELETE]
Must be at least a full-access reviewer to delete.

+ Response 204

## Pipelines [/units/{id}/pipelines]
+ Parameters

    + id (required, number, `1`) ... Unit ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "unit_id": 1,
                    "name": "Subject",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Pipelines][]

### Create [POST]
Must be at least a full-access reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Subject"
            }

+ Response 200 (application/json)

    [Pipeline][]

# Group Stages
Stages are a method of organization within pipelines. They are sequential.

(e.g. New > Reviewed > Interviewed > Done)

## Stage [/stages/{id}]
+ Parameters

    + id (required, number, `1`) ... Pipeline ID

+ Model

    + Body

            {
                "id": 1,
                "pipeline_id": 1,
                "name": "New",
                "position": 1,
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Stage][]

### Update [PUT]
Must be at least a full-access reviewer to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Interviewed",
                "position": 1
            }

+ Response 200 (application/json)

    [Stage][]

### Remove [DELETE]
Must be at least a full-access reviewer to delete.

+ Response 204

## Stages [/pipelines/{id}/stages]
+ Parameters

    + id (required, number, `1`) ... Pipeline ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "pipeline_id": 1,
                    "name": "Subject",
                    "position": 1,
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Stages][]

### Create [POST]
Must be at least a full-access reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Subject",
                "position": 1
            }

+ Response 200 (application/json)

    [Stage][]

# Group Labels
Labels are a method of organization for a unit. They are like tags and are assigned to applications.

## Label [/labels/{id}]
+ Parameters

    + id (required, number, `1`) ... Label ID

+ Model

    + Body

            {
                "id": 1,
                "name": "New",
                "color": "990000",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Label][]

### Update [PUT]
Must be at least a full-access reviewer to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Test",
                "color": "990000"
            }

+ Response 200 (application/json)

    [Label][]

### Remove [DELETE]
Must be at least a full-access reviewer to delete.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 204

## Labels [/units/{id}/labels]
+ Parameters

    + id (required, number, `1`) ... Unit ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "name": "New",
                    "color": "990000",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be a reviewer to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Labels][]

### Create [POST]
Must be at least a full-access reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Subject",
                "color": "990000"
            }

+ Response 200 (application/json)

    [Label][]

# Group Segments
Segments are saved application segments for reviewers based on filters selected.

## Segment [/segments/{id}]
+ Parameters

    + id (required, number, `1`) ... Segment ID

+ Model

    + Body

            {
                "id": 1,
                "reviewer_id": 1,
                "name": "Fresh",
                "dsl": "Stage=1,2,3&Label=1,2",
                "created_at": "2012-03-22T16:56:48-05:00",
                "updated_at": "2012-03-22T16:56:48-05:00"
            }

### Retrieve [GET]
Must be the owner to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Segment][]

### Update [PUT]
Must be the owner to update.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Test",
                "dsl": "Stage=1,2,3"
            }

+ Response 200 (application/json)

    [Segment][]

### Remove [DELETE]
Must be the owner to delete.

+ Response 204

## Segments [/reviewers/{id}/segments]
+ Parameters

    + id (required, number, `1`) ... Reviewer ID

+ Model

    + Body

            [
                {
                    "id": 1,
                    "reviewer_id": 1,
                    "name": "Fresh",
                    "dsl": "Stage=1,2,3&Label=1,2",
                    "created_at": "2012-03-22T16:56:48-05:00",
                    "updated_at": "2012-03-22T16:56:48-05:00"
                }
            ]

### List [GET]
Must be the owner to access.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

+ Response 200 (application/json)

    [Segments][]

### Create [POST]
Must be a reviewer to create.

+ Request (application/json)

    + Header

            Authorization: ApplyanceLogin auth=YW55IGNhcm5hbCBwbGVhc3VyZS4=

    + Body

            {
                "name": "Subject",
                "dsl": "Stage=1,2,3"
            }

+ Response 200 (application/json)

    [Segment][]
